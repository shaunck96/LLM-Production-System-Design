{
  "queries": [
    {
      "name": "Union",
      "sql": "SELECT accountId, conversationId, recognizerResult_text, recognizerResult_intent_value, recognizerResult_intent_score, timestamp, event_Name, event_Type, brd_ActivityId, brd_Text FROM ( SELECT accountId, conversationId, recognizerResult_text, recognizerResult_intent_value, recognizerResult_intent_score, timestamp, NULL as event_Name, NULL as event_Type, NULL as brd_ActivityId, NULL as brd_Text FROM dfIntent UNION ALL SELECT NULL, conversationId, NULL, NULL, NULL, timestamp, event_Name, event_Type, NULL, NULL FROM dfTransferReasonFiltered UNION ALL SELECT NULL, conversationId, NULL, NULL, NULL, timestamp, NULL, NULL, brd_ActivityId, brd_Text FROM dfAudioResponseFiltered ) ORDER BY timestamp;"
    },
    {
      "name": "Minimum",
      "sql": "SELECT df.conversationId, df.timeStamp, min.recognizerResult_text as USER_RESPONSE, min.recognizerResult_intent_value as INTENT, min.recognizerResult_intent_score AS INTENT_SCORE, df.brd_Text as IVR_QUESTION FROM dfUnion df JOIN (SELECT conversationId, first(recognizerResult_text) as recognizerResult_text, first(recognizerResult_intent_value) as recognizerResult_intent_value, first(recognizerResult_intent_score) as recognizerResult_intent_score, min(timeStamp) as timeStamp FROM dfUnion WHERE recognizerResult_intent_value <> 'didnt_understand' AND recognizerResult_text IS NOT NULL AND recognizerResult_text != ' ' GROUP BY conversationId) min ON min.conversationId = df.conversationId AND min.timeStamp > df.timeStamp ORDER BY df.timeStamp;"
    },
    {
      "name": "Filter",
      "sql": "SELECT * FROM csda.tasksegments WHERE DATE(agentConnectTimestamp) >= '{self.start_date}' AND taskId IN ({self.task_ids_str});"
    },
    {
      "name": "Aggregate",
      "sql": "SELECT conversationId, first(USER_RESPONSE) as User_Response, first(INTENT) as Intent, first(INTENT_SCORE) as Intent_Score, last(IVR_QUESTION) as IVR_Question FROM Intent GROUP BY conversationId;"
    }
  ]
}
